echo "# Mangrove-Automata" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/2Crose/Mangrove-Automata.git
git push -u origin main

import pygame
import random

# Define colored neighbors
# Define colored positions
# Define colored updates based on neighbors
"""
    for RED_position in positions:
        col, row = RED_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, RED, (*top_left, TILE_SIZE, TILE_SIZE))
    for WHITE_position in positions:
        col, row = WHITE_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, WHITE, (*top_left, TILE_SIZE, TILE_SIZE))
"""

pygame.init()

GREY = (128,128,128)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 225)
YELLOW = (255, 255, 0)

WIDTH, HEIGHT = 800, 800
TILE_SIZE = 10
GRID_WIDTH = WIDTH // TILE_SIZE
GRID_HEIGHT = HEIGHT // TILE_SIZE
FPS = 60

screen = pygame.display.set_mode((WIDTH, HEIGHT))

clock = pygame.time.Clock()

def gen(num):
    return set([(random.randrange(0, 800), random.randrange(0, 800)) for _ in range(num)])
def gen_2(num):
    return set([(random.randrange(0, GRID_HEIGHT), random.randrange(0, GRID_WIDTH)) for _ in range(num)])

def draw_grid(YELLOW_positions, BLACK_positions):
    for YELLOW_position in YELLOW_positions:
        col, row = YELLOW_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, YELLOW, (*top_left, TILE_SIZE, TILE_SIZE))
    for BLACK_position in BLACK_positions:
        col, row = BLACK_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, BLACK, (*top_left, TILE_SIZE, TILE_SIZE))
    for row in range(GRID_HEIGHT):
        pygame.draw.line(screen, GREY, (0, row * TILE_SIZE), (WIDTH, row * TILE_SIZE))

    for col in range(GRID_WIDTH):
        pygame.draw.line(screen, GREY, (col * TILE_SIZE, 0), (col * TILE_SIZE, HEIGHT))

def adjust_Y_grid(YELLOW_positions, BLACK_positions):

    all_YELLOW_neighbors = set()
    new_YELLOW_positions = set()

    all_BLACK_neighbors = set()
    new_BLACK_positions = set()

    for BLACK_position in BLACK_positions:
        BLACK_neighbors = get_neighbors(BLACK_position)
        all_BLACK_neighbors.update(BLACK_neighbors)
        
        BLACK_neighbors = list(filter(lambda x: x in BLACK_positions, BLACK_neighbors))
        if len(BLACK_neighbors) in [2,3]:
            new_BLACK_positions.add(BLACK_position)

    for BLACK_position in all_BLACK_neighbors:
        BLACK_neighbors = get_neighbors(BLACK_position)
        BLACK_neighbors = list(filter(lambda x: x in BLACK_positions, BLACK_neighbors))

        if len(BLACK_neighbors) in [1,2,3]:
            new_BLACK_positions.add(BLACK_position)
            

    for YELLOW_position in YELLOW_positions:
        YELLOW_neighbors = get_neighbors(YELLOW_position)
        all_YELLOW_neighbors.update(YELLOW_neighbors)

        YELLOW_neighbors = list(filter(lambda x: x in YELLOW_positions, YELLOW_neighbors))

        if len(YELLOW_neighbors) in [2, 3, 4]:
            new_YELLOW_positions.add(YELLOW_position)

    for BLACK_position in new_BLACK_positions:
        BLACK_neighbors = get_neighbors(BLACK_position)
        BLACK_neighbors = list(filter(lambda x: x in new_YELLOW_positions, BLACK_neighbors))
        if len(BLACK_neighbors) in [1, 2, 3, 4]:
            new_YELLOW_positions.add(BLACK_position)

    return YELLOW_positions

def adjust_B_grid(YELLOW_positions, BLACK_positions):
    all_YELLOW_neighbors = set()
    new_YELLOW_positions = set()

    all_BLACK_neighbors = set()
    new_BLACK_positions = set()

    for BLACK_position in BLACK_positions:
        BLACK_neighbors = get_neighbors(BLACK_position)
        all_BLACK_neighbors.update(BLACK_neighbors)
        
        BLACK_neighbors = list(filter(lambda x: x in BLACK_positions, BLACK_neighbors))
        if len(BLACK_neighbors) in [2,3]:
            new_BLACK_positions.add(BLACK_position)

    for BLACK_position in all_BLACK_neighbors:
        BLACK_neighbors = get_neighbors(BLACK_position)
        BLACK_neighbors = list(filter(lambda x: x in BLACK_positions, BLACK_neighbors))

        if len(BLACK_neighbors) in [1,2,3]:
            new_BLACK_positions.add(BLACK_position)
            

    for YELLOW_position in YELLOW_positions:
        YELLOW_neighbors = get_neighbors(YELLOW_position)
        all_YELLOW_neighbors.update(YELLOW_neighbors)

        YELLOW_neighbors = list(filter(lambda x: x in YELLOW_positions, YELLOW_neighbors))

        if len(YELLOW_neighbors) in [2, 3, 4]:
            new_YELLOW_positions.add(YELLOW_position)

    for BLACK_position in new_BLACK_positions:
        BLACK_neighbors = get_neighbors(BLACK_position)
        BLACK_neighbors = list(filter(lambda x: x in new_YELLOW_positions, BLACK_neighbors))
        if len(BLACK_neighbors) in [1, 2, 3, 4]:
            new_YELLOW_positions.add(BLACK_position)

    return BLACK_positions

def get_neighbors(pos):
    x, y = pos
    neighbors = []
    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        nx, ny = x + dx, y + dy
        if abs(dx) + abs(dy) != 1:
          continue
        if 0 <= nx < GRID_WIDTH and 0 <= ny < GRID_HEIGHT:
            neighbors.append((nx, ny))
    return neighbors

def main():
    running = True
    playing = False
    count = 0
    update_freq = 10

    YELLOW_positions = set()
    BLACK_positions = set()
    while running:
        clock.tick(FPS)

        if playing:
            count += 1

        if count >= update_freq:
            count = 0
            YELLOW_positions= adjust_Y_grid(YELLOW_positions, BLACK_positions)
            BLACK_postions = adjust_B_grid(YELLOW_positions, BLACK_positions)
            

        pygame.display.set_caption("Playing" if playing else "Paused")

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            if event.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                col = x // TILE_SIZE
                row = y // TILE_SIZE
                pos = (col, row)

                if pos in positions:
                    positions.remove(pos)
                else:
                    positions.add(pos)

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    playing = not playing

                if event.key == pygame.K_c:
                    positions = set()
                    playing = False
                    count = 0

                if event.key == pygame.K_g:
                    YELLOW_positions = gen(random.randrange(4, 10) * GRID_WIDTH)
                    BLACK_positions = gen_2(random.randrange(4, 10) * GRID_WIDTH)

        screen.fill(BLUE)
        draw_grid(YELLOW_positions, BLACK_positions)
        pygame.display.update()


    pygame.quit()

if __name__ == "__main__":
    main()
